plugins {
    id("io.micronaut.application")
    id("io.micronaut.openapi")
    id("io.micronaut.aot")
    id("io.micronaut.test-resources")
    id("io.micronaut.docker")
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    implementation("io.micrometer:context-propagation")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.validation:jakarta.validation-api")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    runtimeOnly("org.postgresql:postgresql")
    runtimeOnly("org.yaml:snakeyaml")
    testImplementation("io.micronaut:micronaut-http-client")
    //testImplementation("io.micronaut.controlpanel:micronaut-control-panel-ui:1.8.0")
    //testImplementation("io.micronaut.controlpanel:micronaut-control-panel-management")
    //testImplementation("io.micronaut:micronaut-management")
    //testImplementation("org.testcontainers:testcontainers:1.21.3")
    //testImplementation("org.testcontainers:postgresql:1.21.3")
}

application {
    mainClass = "org.igor.books.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.igor.books.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
    openapi {
        server(file("src/main/resources/books-definition.yml")) {
            apiPackageName = "org.igor.books.api"
            modelPackageName = "org.igor.books.model"
            invokerPackageName = "org.igor.books.invoker"
            useReactive = false
            useAuth = false
        }
    }
}

/*
tasks.named("optimizedDockerBuild") {
    images=["books-opt:latest", "books-opt:12345", "books-opt:$project.version"]

}
tasks.named("dockerBuildNative") {
    images.add("books-native:latest")
    images.add("books-native:12345")
    images.add("books-native:$project.version")
}

*/



